// START rdump/Cargo.toml

[package]
name = "rdump"
version = "0.1.0"
edition = "2021"

[dependencies]
clap = { version = "4.5.4", features = ["derive"] }
anyhow = "1.0.86"
ignore = "0.4.22" # <--- NO FEATURES. THIS IS THE CORRECT LINE.
rayon = "1.10.0"
regex = "1.10.4"
serde = { version = "1.0.203", features = ["derive"] }
serde_json = "1.0.117"
pest = "2.7.10"
pest_derive = "2.7.10"
tempfile = "3.20.0"
glob = "0.3.1"
dirs = "5.0.1"
toml = "0.8.12"
chrono = { version = "0.4", features = ["serde"] }



// END rdump/Cargo.toml

// START rdump/src/commands/mod.rs

// This makes the functions inside search.rs and preset.rs available
// to other parts of the program that use the `commands` module.
pub mod search;
pub mod preset;


// END rdump/src/commands/mod.rs

// START rdump/src/commands/preset.rs

use anyhow::{anyhow, Result};
use std::fs;
use crate::config::{self, Config};
use crate::PresetAction; // We'll need to make PresetAction public

/// The main entry point for the `preset` command.
pub fn run_preset(action: PresetAction) -> Result<()> {
    match action {
        PresetAction::List => {
            let config = config::load_config()?;
            if config.presets.is_empty() {
                println!("No presets found.");
            } else {
                println!("Available presets:");
                let max_len = config.presets.keys().map(|k| k.len()).max().unwrap_or(0);
                for (name, query) in config.presets {
                    println!("  {:<width$} : {}", name, query, width = max_len);
                }
            }
        }
        PresetAction::Add { name, query } => {
            let path = config::global_config_path()
                .ok_or_else(|| anyhow!("Could not determine global config path"))?;

            let mut config = if path.exists() {
                let config_str = fs::read_to_string(&path)?;
                toml::from_str(&config_str)?
            } else {
                Config::default()
            };

            println!("Adding/updating preset '{}'...", name);
            config.presets.insert(name, query);
            config::save_config(&config)?;
        }
        PresetAction::Remove { name } => {
            let path = config::global_config_path()
                .ok_or_else(|| anyhow!("Could not determine global config path"))?;

            if !path.exists() {
                return Err(anyhow!("Global config file does not exist. No presets to remove."));
            }

            let mut config: Config = toml::from_str(&fs::read_to_string(&path)?)?;

            if config.presets.remove(&name).is_some() {
                println!("Removing preset '{}'...", name);
                config::save_config(&config)?;
            } else {
                return Err(anyhow!("Preset '{}' not found in global config.", name));
            }
        }
    }
    Ok(())
}


// END rdump/src/commands/preset.rs

// START rdump/src/commands/search.rs

use anyhow::Result;
use ignore::overrides::OverrideBuilder;
use ignore::WalkBuilder;
use rayon::prelude::*;
use std::fs::File;
use std::io::{self, Write};
use std::path::PathBuf;

use crate::evaluator::Evaluator;
use crate::formatter;
use crate::parser;
use crate::{config, SearchArgs};

/// The main entry point for the `search` command.
pub fn run_search(mut args: SearchArgs) -> Result<()> {
    // --- Load Config and Build Query ---
    let config = config::load_config()?;
    let mut final_query = args.query.take().unwrap_or_default();

    for preset_name in args.preset.iter().rev() {
        let preset_query = config.presets.get(preset_name)
            .ok_or_else(|| anyhow::anyhow!("Preset '{}' not found", preset_name))?;

        if final_query.is_empty() {
            final_query = format!("({})", preset_query);
        } else {
            final_query = format!("({}) & {}", preset_query, final_query);
        }
    }

    if final_query.is_empty() {
        return Err(anyhow::anyhow!("Empty query. Provide a query string or use a preset."));
    }

    // --- 1. Find candidates ---
    let candidate_files = get_candidate_files(
        &args.root,
        args.no_ignore,
        args.hidden,
        args.max_depth,
    )?;

    // --- 2. Parse query ---
    let ast = parser::parse_query(&final_query)?;

    // --- 3. Evaluate files ---
    let evaluator = Evaluator::new(&ast);
    let mut matching_files: Vec<PathBuf> = candidate_files
        .par_iter()
        .filter_map(|path| match evaluator.evaluate(path) {
            Ok(true) => Some(path.clone()),
            Ok(false) => None,
            Err(e) => {
                eprintln!("Error evaluating file {}: {}", path.display(), e);
                None
            }
        })
        .collect();

    matching_files.sort();

    // --- 4. Format and print results ---
    let mut writer: Box<dyn Write> = if let Some(output_path) = &args.output {
        Box::new(File::create(output_path)?)
    } else {
        Box::new(io::stdout())
    };

    formatter::print_output(
        &mut writer,
        &matching_files,
        &args.format,
        args.line_numbers,
    )?;

    Ok(())
}

/// Walks the directory, respecting .gitignore, and applies our own smart defaults.
// This is now a private helper function within the search module.
fn get_candidate_files(
    root: &PathBuf,
    no_ignore: bool,
    hidden: bool,
    max_depth: Option<usize>,
) -> Result<Vec<PathBuf>> {
    let mut files = Vec::new();
    let mut override_builder = OverrideBuilder::new(root);
    if !no_ignore {
        override_builder.add("!node_modules/")?;
        override_builder.add("!target/")?;
        override_builder.add("!.git/")?;
    }
    let overrides = override_builder.build()?;
    let mut walker_builder = WalkBuilder::new(root);
    walker_builder
        .overrides(overrides)
        .ignore(!no_ignore)
        .hidden(!hidden)
        .max_depth(max_depth);
    for result in walker_builder.build() {
        let entry = result?;
        if entry.file_type().map_or(false, |ft| ft.is_file()) {
            files.push(entry.into_path());
        }
    }
    Ok(files)
}


// END rdump/src/commands/search.rs

// START rdump/src/config.rs

use anyhow::{Context, Result};
use serde::{Deserialize, Serialize};
use std::collections::HashMap;
use std::fs;
use std::path::PathBuf;

// This struct represents the structure of our TOML config file.
// `#[derive(Deserialize)]` tells serde how to create this struct from TOML text.
#[derive(Deserialize, Serialize, Debug, Default)]
pub struct Config {
    // `#[serde(default)]` ensures that if the `presets` table is missing,
    // we just get an empty HashMap instead of an error.
    #[serde(default)]
    pub presets: HashMap<String, String>,
}

/// Finds and loads the configuration, merging global and local files.
pub fn load_config() -> Result<Config> {
    let mut final_config = Config::default();

    // 1. Load the global config file, if it exists.
    if let Some(global_config_path) = global_config_path() {
        if global_config_path.exists() {
            let global_config_str = fs::read_to_string(&global_config_path)
                .with_context(|| format!("Failed to read global config at {:?}", global_config_path))?;
            let global_config: Config = toml::from_str(&global_config_str)?;
            final_config.presets.extend(global_config.presets);
        }
    }

    // 2. Find and load the local config file, if it exists.
    // Local presets will overwrite global ones with the same name.
    if let Some(local_config_path) = find_local_config() {
        if local_config_path.exists() {
            let local_config_str = fs::read_to_string(&local_config_path)
                .with_context(|| format!("Failed to read local config at {:?}", local_config_path))?;
            let local_config: Config = toml::from_str(&local_config_str)?;
            final_config.presets.extend(local_config.presets);
        }
    }

    Ok(final_config)
}

/// Returns the path to the global configuration file.
pub fn global_config_path() -> Option<PathBuf> {
    // Use the `dirs` crate to find the conventional config directory.
    dirs::config_dir().map(|p| p.join("rdump/config.toml"))
}

/// Searches for a local `.rdump.toml` in the current directory and its parents.
fn find_local_config() -> Option<PathBuf> {
    let current_dir = std::env::current_dir().ok()?;
    for ancestor in current_dir.ancestors() {
        let config_path = ancestor.join(".rdump.toml");
        if config_path.exists() {
            return Some(config_path);
        }
    }
    None
}

/// Saves the given config to the global configuration file.
pub fn save_config(config: &Config) -> Result<()> {
    let path = global_config_path().ok_or_else(|| anyhow::anyhow!("Could not determine global config path"))?;

    // Ensure the parent directory exists.
    if let Some(parent) = path.parent() {
        fs::create_dir_all(parent)
            .with_context(|| format!("Failed to create config directory at {:?}", parent))?;
    }

    let toml_string = toml::to_string_pretty(config)?;
    fs::write(&path, toml_string)
        .with_context(|| format!("Failed to write global config to {:?}", path))?;

    println!("Successfully saved config to {:?}", path);
    Ok(())
}


// END rdump/src/config.rs

// START rdump/src/evaluator.rs

use anyhow::{Context, Result};
use regex;
use std::fs;
use std::path::{Path, PathBuf};
use std::time::{Duration, SystemTime};

use crate::parser::{AstNode, PredicateKey};

/// A context for a single file being evaluated.
/// It lazily loads metadata and content to avoid unnecessary I/O.
#[derive(Debug)]
pub struct FileContext {
    pub path: PathBuf,
    content: Option<String>,
}

// THE CORRECTED LINE:
impl FileContext {
    /// Creates a new context for a given path.
    pub fn new(path: PathBuf) -> Self {
        FileContext {
            path,
            content: None,
        }
    }

    /// Lazily gets the file content, reading it from disk only once.
    fn get_content(&mut self) -> Result<&str> {
        if self.content.is_none() {
            let content = fs::read_to_string(&self.path)
                .with_context(|| format!("Failed to read file content: {}", self.path.display()))?;
            self.content = Some(content);
        }
        Ok(self.content.as_ref().unwrap())
    }
}

/// The main evaluator struct. It holds the parsed query AST.
pub struct Evaluator<'a> {
    ast: &'a AstNode,
}

impl<'a> Evaluator<'a> {
    /// Creates a new evaluator with a reference to the AST.
    pub fn new(ast: &'a AstNode) -> Self {
        Self { ast }
    }

    /// Evaluates a single file path against the AST.
    pub fn evaluate(&self, path: &Path) -> Result<bool> {
        let mut context = FileContext::new(path.to_path_buf());
        self.evaluate_node(self.ast, &mut context)
    }

    /// The core recursive function that walks the AST.
    fn evaluate_node(&self, node: &AstNode, context: &mut FileContext) -> Result<bool> {
        match node {
            AstNode::And(left, right) => {
                Ok(self.evaluate_node(left, context)? && self.evaluate_node(right, context)?)
            }
            AstNode::Or(left, right) => {
                Ok(self.evaluate_node(left, context)? || self.evaluate_node(right, context)?)
            }
            AstNode::Not(node) => Ok(!self.evaluate_node(node, context)?),
            AstNode::Predicate { key, value } => self.evaluate_predicate(key, value, context),
        }
    }

    /// Dispatches to the correct logic for each predicate type.
    fn evaluate_predicate(
        &self,
        key: &PredicateKey,
        value: &str,
        context: &mut FileContext,
    ) -> Result<bool> {
        match key {
            PredicateKey::Ext => {
                let file_ext = context.path.extension().and_then(|s| s.to_str()).unwrap_or("");
                Ok(file_ext.eq_ignore_ascii_case(value))
            }
            PredicateKey::Path => {
                let path_str = context.path.to_string_lossy();
                Ok(path_str.contains(value))
            }
            PredicateKey::Name => {
                let file_name = context.path.file_name().and_then(|s| s.to_str()).unwrap_or("");
                let pattern = glob::Pattern::new(value)
                    .with_context(|| format!("Invalid glob pattern: '{}'", value))?;
                Ok(pattern.matches(file_name))
            }
            PredicateKey::Contains => {
                let content = context.get_content()?;
                Ok(content.contains(value))
            }
            PredicateKey::Matches => {
                let content = context.get_content()?;
                let re = regex::Regex::new(value)
                    .with_context(|| format!("Invalid regex pattern: '{}'", value))?;
                Ok(re.is_match(content))
            }
            
            // --- NEW IMPLEMENTATIONS ---
            PredicateKey::Size => {
                let metadata = context.path.metadata()?;
                let file_size = metadata.len();
                parse_and_compare_size(file_size, value)
            }
            PredicateKey::Modified => {
                let metadata = context.path.metadata()?;
                let modified_time = metadata.modified()?;
                parse_and_compare_time(modified_time, value)
            }
            // --- END NEW ---

            PredicateKey::Other(unknown_key) => {
                println!("Warning: unknown predicate key '{}'", unknown_key);
                Ok(false)
            }
        }
    }
}

fn parse_and_compare_size(file_size: u64, value: &str) -> Result<bool> {
    if value.len() < 2 {
        return Err(anyhow::anyhow!("Invalid size format. Expected <op><num>[unit], e.g., '>10kb'"));
    }

    let op = value.chars().next().unwrap();
    let rest = &value[1..];

    // Find the end of the numeric part
    let numeric_part_end = rest
        .find(|c: char| !c.is_ascii_digit() && c != '.')
        .unwrap_or(rest.len());

    let (num_str, unit_str) = rest.split_at(numeric_part_end);
    let num: f64 = num_str.parse()?;

    let multiplier = match unit_str.trim().to_lowercase().as_str() {
        "" | "b" => 1.0,
        "k" | "kb" => 1024.0,
        "m" | "mb" => 1024.0 * 1024.0,
        "g" | "gb" => 1024.0 * 1024.0 * 1024.0,
        _ => return Err(anyhow::anyhow!("Invalid size unit: '{}'. Supported units: k, kb, m, mb, g, gb.", unit_str)),
    };

    let target_size = (num * multiplier) as u64;

    match op {
        '>' => Ok(file_size > target_size),
        '<' => Ok(file_size < target_size),
        _ => Err(anyhow::anyhow!("Invalid size operator: '{}'. Must be '>' or '<'.", op)),
    }
}

fn parse_and_compare_time(modified_time: SystemTime, value: &str) -> Result<bool> {
    let (op, duration_str) = value.split_at(1);
    let now = SystemTime::now();

    let (num_str, unit) = duration_str.split_at(duration_str.len() - 1);
    let num: u64 = num_str.parse()?;

    let duration = match unit {
        "s" => Duration::from_secs(num),
        "m" => Duration::from_secs(num * 60),
        "h" => Duration::from_secs(num * 3600),
        "d" => Duration::from_secs(num * 3600 * 24),
        "w" => Duration::from_secs(num * 3600 * 24 * 7),
        _ => return Err(anyhow::anyhow!("Invalid time unit: '{}'. Must be s, m, h, d, w.", unit)),
    };
    
    let cutoff_time = now - duration;

    match op {
        ">" => Ok(modified_time > cutoff_time), // Modified more recently than the cutoff
        "<" => Ok(modified_time < cutoff_time), // Modified longer ago than the cutoff
        _ => Err(anyhow::anyhow!("Invalid time operator: '{}'. Must be '>' or '<'.", op)),
    }
}


#[cfg(test)]
mod tests {
    use super::*;
    use crate::parser;
    use std::io::Write;
    use tempfile::{Builder, NamedTempFile};

    // Helper to create a temporary file with specific content for a test.
    fn create_temp_file(content: &str, extension: &str) -> NamedTempFile {
        let mut file = Builder::new()
            .prefix("rdump_test_")
            .suffix(&format!(".{}", extension))
            .tempfile()
            .unwrap();
        file.write_all(content.as_bytes()).unwrap();
        file
    }

    // Helper to run a query against a file and assert the result.
    fn assert_eval(query: &str, file_path: &Path, expected: bool) {
        let ast = parser::parse_query(query).unwrap();
        let evaluator = Evaluator::new(&ast);
        let result = evaluator.evaluate(file_path).unwrap();
        assert_eq!(
            result,
            expected,
            "Query: '{}' on file '{}'",
            query,
            file_path.display()
        );
    }

    #[test]
    fn test_predicate_ext() {
        let file = create_temp_file("hello world", "rs");
        assert_eval("ext:rs", file.path(), true);
        assert_eval("ext:toml", file.path(), false);
        assert_eval("ext:RS", file.path(), true);
    }

    #[test]
    fn test_predicate_path() {
        let file = create_temp_file(r#"some content"#, "txt");
        let path_str = file.path().to_string_lossy();

        let path_segment = path_str.split(std::path::MAIN_SEPARATOR).last().unwrap();

        assert_eval(&format!("path:{}", path_segment), file.path(), true);
        assert_eval("path:this_will_not_exist", file.path(), false);
    }

    #[test]
    fn test_predicate_contains() {
        let file = create_temp_file("hello rust world", "txt");
        assert_eval("contains:rust", file.path(), true);
        assert_eval("contains:'hello world'", file.path(), false);
        assert_eval("contains:goodbye", file.path(), false);
    }

    #[test]
    fn test_logical_and() {
        let file = create_temp_file("fn main() {}", "rs");
        assert_eval("ext:rs & contains:main", file.path(), true);
        assert_eval("ext:rs & contains:goodbye", file.path(), false);
        assert_eval("ext:toml & contains:main", file.path(), false);
    }

    #[test]
    fn test_logical_or() {
        let file = create_temp_file("some toml content", "toml");
        assert_eval("ext:rs | contains:toml", file.path(), true);
        assert_eval("ext:toml | contains:rust", file.path(), true);
        assert_eval("ext:rs | contains:rust", file.path(), false);
    }

    #[test]
    fn test_logical_not() {
        let file = create_temp_file("hello", "md");
        assert_eval("!ext:rs", file.path(), true);
        assert_eval("!ext:md", file.path(), false);
        assert_eval("!(ext:rs | ext:toml)", file.path(), true);
        assert_eval("!(ext:md | ext:toml)", file.path(), false);
    }

    #[test]
    fn test_complex_query() {
        let file = create_temp_file("public fn start()", "rs");
        let query = "ext:rs & !path:tests & contains:'fn'";
        assert_eval(query, file.path(), true);

        let query = "(ext:rs & contains:struct) | ext:toml";
        assert_eval(query, file.path(), false);
    }

    #[test]
    fn test_lazy_content_loading() {
        let file = create_temp_file("expensive content", "txt");
        let ast = parser::parse_query("ext:rs & contains:expensive").unwrap();
        let evaluator = Evaluator::new(&ast);
        let result = evaluator.evaluate(file.path()).unwrap();
        assert_eq!(
            result, false,
            "Should short-circuit and not evaluate contains"
        );
    }

    #[test]
    fn test_predicate_name_glob() {
        let file = create_temp_file("content", "rs");
        let file_name = file.path().file_name().unwrap().to_str().unwrap();

        // Exact match
        assert_eval(&format!("name:'{}'", file_name), file.path(), true);
        // Glob match
        assert_eval("name:'*_test_*.rs'", file.path(), true);
        assert_eval("name:'*.rs'", file.path(), true);
        assert_eval("name:'*.toml'", file.path(), false);
    }

    #[test]
    fn test_predicate_matches_regex() {
        let file = create_temp_file("hello 123 world", "txt");
        // Matches a digit
        assert_eval(r#"matches:'\d+'"#, file.path(), true);
        // Matches start of string
        assert_eval("matches:'^hello'", file.path(), true);
        // Does not match
        assert_eval("matches:'^world'", file.path(), false);
        // Invalid regex should not panic, but return an error (which assert_eval would unwrap)
        // A more robust test could check for the specific error.
        let ast = parser::parse_query("matches:'('").unwrap();
        let evaluator = Evaluator::new(&ast);
        let result = evaluator.evaluate(file.path());
        assert!(result.is_err(), "Invalid regex should produce an error");
    }

    #[test]
    fn test_unknown_predicate_is_false() {
        let file = create_temp_file("some content", "txt");
        // Our parser turns `foo:bar` into `PredicateKey::Other("foo")`
        // The evaluator should see this and return false.
        assert_eval("foo:bar", file.path(), false);
    }

    #[test]
    fn test_predicate_size_with_units() {
        // Create a file that is exactly 1.5 KB (1536 bytes)
        let content: Vec<u8> = vec![0; 1536];
        let mut file = create_temp_file("", "txt"); // file name/ext don't matter
        file.write_all(&content).unwrap();

        // Test kilobytes
        assert_eval("size:>1kb", file.path(), true);
        assert_eval("size:<2kb", file.path(), true);
        assert_eval("size:>1.6KB", file.path(), false); // Test uppercase and float
        assert_eval("size:<1.4k", file.path(), false); // Test single letter unit

        // Test bytes
        assert_eval("size:>1535", file.path(), true);
        assert_eval("size:<1537b", file.path(), true); // Test 'b' unit
        assert_eval("size:>1536", file.path(), false);

        // Test megabytes
        assert_eval("size:<1mb", file.path(), true);

        // Test invalid query
        let ast = parser::parse_query("size:>10xb").unwrap();
        let evaluator = Evaluator::new(&ast);
        let result = evaluator.evaluate(file.path());
        assert!(result.is_err(), "Invalid size unit should produce an error");
    }

    #[test]
    fn test_predicate_modified() {
        let file = create_temp_file("content", "txt");
        // The file was just created, so it was modified less than 1 hour ago.
        assert_eval("modified:>1h", file.path(), true);
        // It was not modified more than 1 hour ago.
        assert_eval("modified:<1h", file.path(), false);
    }
}


// END rdump/src/evaluator.rs

// START rdump/src/formatter.rs

use anyhow::{Context, Result};
use chrono::{DateTime, Local}; // For formatting timestamps
#[cfg(unix)]
use std::os::unix::fs::PermissionsExt; // For Unix permissions
use std::fs;
use std::io::Write;
use std::path::PathBuf;
use serde::{Deserialize, Serialize};

// We need to pass the format enum from main.rs
use crate::Format;

#[derive(Serialize, Deserialize, Debug, PartialEq)]
struct FileOutput {
    path: String,
    content: String,
}

/// Formats and prints the final output to a generic writer based on the chosen format.
pub fn print_output(
    writer: &mut impl Write,
    matching_files: &[PathBuf],
    format: &Format,
    with_line_numbers: bool,
) -> Result<()> {
    match format {
        Format::Find => {
            for path in matching_files {
                let metadata = fs::metadata(path)?;
                let size = metadata.len();
                let modified: DateTime<Local> = DateTime::from(metadata.modified()?);

                // Get permissions (basic implementation)
                let perms = metadata.permissions();
                let mode = perms.mode();
                let perms_str = format_mode(mode);

                // Format size into human-readable string
                let size_str = format_size(size);

                // Format time
                let time_str = modified.format("%b %d %H:%M").to_string();

                writeln!(
                    writer,
                    "{:<12} {:>8} {} {}",
                    perms_str,
                    size_str,
                    time_str,
                    path.display()
                )?;
            }
        }
        Format::Paths => {
            for path in matching_files {
                writeln!(writer, "{}", path.display())?;
            }
        }
        Format::Cat => {
            for path in matching_files {
                let content = fs::read_to_string(path)
                    .with_context(|| format!("Failed to read file for final output: {}", path.display()))?;
                if with_line_numbers {
                    for (i, line) in content.lines().enumerate() {
                        writeln!(writer, "{:>5} | {}", i + 1, line)?;
                    }
                } else {
                    writeln!(writer, "{}", content)?;
                }
            }
        }
        Format::Json => {
            let mut outputs = Vec::new();
            for path in matching_files {
                let content = fs::read_to_string(path)
                    .with_context(|| format!("Failed to read file for final output: {}", path.display()))?;
                outputs.push(FileOutput {
                    path: path.to_string_lossy().to_string(),
                    content,
                });
            }
            // Use to_writer_pretty for readable JSON output
            serde_json::to_writer_pretty(writer, &outputs)?;
        }
        Format::Markdown => {
            for (i, path) in matching_files.iter().enumerate() {
                if i > 0 {
                    writeln!(writer, "\n---\n")?;
                }
                writeln!(writer, "File: {}", path.display())?;
                writeln!(writer, "---")?;
                let content = fs::read_to_string(path)
                    .with_context(|| format!("Failed to read file for final output: {}", path.display()))?;

                if with_line_numbers {
                    for (i, line) in content.lines().enumerate() {
                        writeln!(writer, "{:>5} | {}", i + 1, line)?;
                    }
                } else {
                    writeln!(writer, "{}", content)?;
                }
            }
        }
    }
    Ok(())
}

fn format_mode(mode: u32) -> String {
    #[cfg(unix)]
    {
        let user_r = if mode & 0o400 != 0 { 'r' } else { '-' };
        let user_w = if mode & 0o200 != 0 { 'w' } else { '-' };
        let user_x = if mode & 0o100 != 0 { 'x' } else { '-' };
        let group_r = if mode & 0o040 != 0 { 'r' } else { '-' };
        let group_w = if mode & 0o020 != 0 { 'w' } else { '-' };
        let group_x = if mode & 0o010 != 0 { 'x' } else { '-' };
        let other_r = if mode & 0o004 != 0 { 'r' } else { '-' };
        let other_w = if mode & 0o002 != 0 { 'w' } else { '-' };
        let other_x = if mode & 0o001 != 0 { 'x' } else { '-' };
        format!("-{}{}{}{}{}{}{}{}{}", user_r, user_w, user_x, group_r, group_w, group_x, other_r, other_w, other_x)
    }
    #[cfg(not(unix))]
    {
        // Basic fallback for non-Unix platforms
        if mode & 0o200 != 0 { "-rw-------" } else { "-r--------" }.to_string()
    }
}

fn format_size(bytes: u64) -> String {
    const KB: u64 = 1024;
    const MB: u64 = KB * 1024;
    const GB: u64 = MB * 1024;

    if bytes >= GB {
        format!("{:.1}G", bytes as f64 / GB as f64)
    } else if bytes >= MB {
        format!("{:.1}M", bytes as f64 / MB as f64)
    } else if bytes >= KB {
        format!("{:.1}K", bytes as f64 / KB as f64)
    } else {
        format!("{}B", bytes)
    }
}


#[cfg(test)]
mod tests {
    use super::*;
    use tempfile::NamedTempFile;
    use std::io::Write;

    fn create_temp_file_with_content(content: &str) -> NamedTempFile {
        let mut file = tempfile::NamedTempFile::new().unwrap();
        file.write_all(content.as_bytes()).unwrap();
        file
    }

    // --- UPDATED AND NEW TESTS ---

    #[test]
    fn test_format_markdown() {
        let file = create_temp_file_with_content("line 1");
        let paths = vec![file.path().to_path_buf()];
        let mut writer = Vec::new();
        print_output(&mut writer, &paths, &Format::Markdown, false).unwrap();
        let output = String::from_utf8(writer).unwrap();
        let expected = format!("File: {}\n---\nline 1\n", file.path().display());
        assert_eq!(output, expected);
    }

    #[test]
    fn test_format_cat_with_line_numbers() {
        let file = create_temp_file_with_content("a\nb");
        let paths = vec![file.path().to_path_buf()];
        let mut writer = Vec::new();
        print_output(&mut writer, &paths, &Format::Cat, true).unwrap();
        let output = String::from_utf8(writer).unwrap();
        assert_eq!(output, "    1 | a\n    2 | b\n");
    }

    #[test]
    fn test_format_paths() {
        let file1 = create_temp_file_with_content("a");
        let file2 = create_temp_file_with_content("b");
        let paths = vec![file1.path().to_path_buf(), file2.path().to_path_buf()];
        let mut writer = Vec::new();
        print_output(&mut writer, &paths, &Format::Paths, false).unwrap();
        let output = String::from_utf8(writer).unwrap();
        let expected = format!("{}\n{}\n", file1.path().display(), file2.path().display());
        assert_eq!(output, expected);
    }

    #[test]
    fn test_format_json() {
        let file1 = create_temp_file_with_content("{\"key\": \"value\"}");
        let file2 = create_temp_file_with_content("some text");
        let paths = vec![file1.path().to_path_buf(), file2.path().to_path_buf()];
        let mut writer = Vec::new();
        print_output(&mut writer, &paths, &Format::Json, false).unwrap();

        // The output is pretty-printed, so we compare the parsed data, not the raw string.
        let output_data: Vec<FileOutput> = serde_json::from_slice(&writer).unwrap();

        assert_eq!(output_data.len(), 2);
        assert_eq!(output_data[0].path, file1.path().to_string_lossy());
        assert_eq!(output_data[0].content, "{\"key\": \"value\"}");
        assert_eq!(output_data[1].path, file2.path().to_string_lossy());
        assert_eq!(output_data[1].content, "some text");
    }

    #[test]
    fn test_format_find() {
        let file = create_temp_file_with_content("hello"); // 5 bytes
        let paths = vec![file.path().to_path_buf()];
        let mut writer = Vec::new();

        print_output(&mut writer, &paths, &Format::Find, false).unwrap();

        let output = String::from_utf8(writer).unwrap();

        // We can't test the exact permissions or timestamp, but we can test the structure.
        assert!(output.contains("5B")); // Check for size
        assert!(output.contains(file.path().to_str().unwrap())); // Check for path
        assert!(output.ends_with('\n'));
    }
}


// END rdump/src/formatter.rs

// START rdump/src/main.rs

// Declare all our modules
mod commands;
mod config;
mod evaluator;
mod formatter;
mod parser;

use anyhow::Result;
use clap::{Parser, Subcommand, ValueEnum};
use std::path::PathBuf;

// Bring our command functions into scope
use commands::{preset::run_preset, search::run_search};

// These structs and enums define the public API of our CLI.
// They need to be public so the `commands` modules can use them.
#[derive(Parser, Debug)]
#[command(version, about = "A fast, expressive tool to find and dump file contents.")]
pub struct Cli {
    #[command(subcommand)]
    pub command: Commands,
}

#[derive(Subcommand, Debug)]
pub enum Commands {
    /// Search for files using a query (default command).
    #[command(visible_alias = "s")]
    Search(SearchArgs),
    /// Manage saved presets.
    #[command(visible_alias = "p")]
    Preset(PresetArgs),
}

#[derive(Parser, Debug, Clone)]
pub struct SearchArgs {
    #[arg()]
    pub query: Option<String>,
    #[arg(long, short)]
    pub preset: Vec<String>,
    #[arg(short, long, default_value = ".")]
    pub root: PathBuf,
    #[arg(short, long)]
    pub output: Option<PathBuf>,
    #[arg(short, long)]
    pub line_numbers: bool,
    #[arg(long)]
    pub no_headers: bool,
    #[arg(long, value_enum, default_value_t = Format::Markdown)]
    pub format: Format,
    #[arg(long)]
    pub no_ignore: bool,
    #[arg(long)]
    pub hidden: bool,
    #[arg(long)]
    pub max_depth: Option<usize>,

    /// List files with metadata instead of dumping content.
    #[arg(long)]
    pub find: bool, // <-- NEW
}

#[derive(Parser, Debug)]
pub struct PresetArgs {
    #[command(subcommand)]
    pub action: PresetAction,
}

#[derive(Subcommand, Debug, Clone)]
pub enum PresetAction {
    /// List all available presets.
    List,
    /// Add or update a preset in the global config file.
    Add {
        #[arg(required = true)]
        name: String,
        #[arg(required = true)]
        query: String,
    },
    /// Remove a preset from the global config file.
    Remove {
        #[arg(required = true)]
        name: String,
    },
}

#[derive(Debug, Clone, ValueEnum)]
pub enum Format {
    Markdown,
    Json,
    Paths,
    Cat,
    Find, // <-- NEW
}

/// The main entry point.
/// Its only job is to parse the CLI and delegate to the correct command module.
fn main() -> Result<()> {
    let mut cli = Cli::parse();

    match &mut cli.command {
        Commands::Search(args) => {
            // --- Handle Shorthand Flags ---
            if args.no_headers {
                args.format = Format::Cat;
            }
            // NEW: Handle `--find` shorthand
            if args.find {
                args.format = Format::Find;
            }
            run_search(args.clone())
        }
        Commands::Preset(args) => run_preset(args.action.clone()),
    }
}


// END rdump/src/main.rs

// START rdump/src/parser.rs

use anyhow::{anyhow, Result};
use pest::iterators::Pair;
use pest::Parser;
use pest_derive::Parser;

#[derive(Parser)]
#[grammar = "rql.pest"]
pub struct RqlParser;

#[derive(Debug, PartialEq, Eq)]
pub enum PredicateKey {
    Ext,
    Name,
    Path,
    Contains,
    Matches,
    // --- NEW PREDICATES ---
    Size,
    Modified,
    // A key for testing or unknown predicates
    Other(String),
}

impl PredicateKey {
    fn from_str(s: &str) -> Self {
        match s {
            "ext" => Self::Ext,
            "name" => Self::Name,
            "path" => Self::Path,
            "contains" | "c" => Self::Contains,
            "matches" | "m" => Self::Matches,
            // --- NEW PREDICATES ---
            "size" => Self::Size,
            "modified" => Self::Modified,
            // Any other key is captured here.
            other => Self::Other(other.to_string()),
        }
    }
}

#[derive(Debug)]
pub enum AstNode {
    And(Box<AstNode>, Box<AstNode>),
    Or(Box<AstNode>, Box<AstNode>),
    Not(Box<AstNode>),
    Predicate { key: PredicateKey, value: String },
}

pub fn parse_query(query: &str) -> Result<AstNode> {
    // Check for empty or whitespace-only queries BEFORE parsing.
    if query.trim().is_empty() {
        return Err(anyhow!("Empty query"));
    }

    // Map the pest error to a cleaner message if parsing fails.
    let mut pairs = RqlParser::parse(Rule::query, query)
        .map_err(|e| anyhow!("Syntax error in query: {}", e))?;

    let top_level_pair = pairs.next().unwrap(); // Should not fail after the check above
    build_ast_from_pair(top_level_pair)
}

fn build_ast_from_pair(pair: Pair<Rule>) -> Result<AstNode> {
    match pair.as_rule() {
        Rule::query | Rule::expression => build_ast_from_pair(pair.into_inner().next().unwrap()),
        Rule::logical_or => {
            let mut inner = pair.into_inner();
            let mut ast = build_ast_from_pair(inner.next().unwrap())?;
            while inner.next().is_some() {
                let rhs = build_ast_from_pair(inner.next().unwrap())?;
                ast = AstNode::Or(Box::new(ast), Box::new(rhs));
            }
            Ok(ast)
        }
        Rule::logical_and => {
            let mut inner = pair.into_inner();
            let mut ast = build_ast_from_pair(inner.next().unwrap())?;
            while inner.next().is_some() {
                let rhs = build_ast_from_pair(inner.next().unwrap())?;
                ast = AstNode::And(Box::new(ast), Box::new(rhs));
            }
            Ok(ast)
        }
        Rule::factor => {
            let mut inner = pair.into_inner();
            let first_node = inner.next().unwrap();
            if first_node.as_rule() == Rule::NOT {
                let expr = build_ast_from_pair(inner.next().unwrap())?;
                Ok(AstNode::Not(Box::new(expr)))
            } else {
                build_ast_from_pair(first_node)
            }
        }
        Rule::predicate => {
            let mut inner = pair.into_inner();
            let key_str = inner.next().unwrap().as_str();
            let key = PredicateKey::from_str(key_str);

            let value_pair = inner.next().unwrap();
            let inner_value_pair = value_pair.into_inner().next().unwrap();
            let final_value = match inner_value_pair.as_rule() {
                Rule::unquoted_value => inner_value_pair.as_str().to_string(),
                Rule::quoted_value => {
                    let s = inner_value_pair.as_str();
                    s[1..s.len() - 1].to_string()
                }
                _ => unreachable!(),
            };
            Ok(AstNode::Predicate {
                key,
                value: final_value,
            })
        }
        _ => unreachable!(
            "build_ast_from_pair called on unexpected rule: {:?}",
            pair.as_rule()
        ),
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    impl PartialEq for AstNode {
        fn eq(&self, other: &Self) -> bool {
            match (self, other) {
                (AstNode::And(l1, r1), AstNode::And(l2, r2)) => l1 == l2 && r1 == r2,
                (AstNode::Or(l1, r1), AstNode::Or(l2, r2)) => l1 == l2 && r1 == r2,
                (AstNode::Not(n1), AstNode::Not(n2)) => n1 == n2,
                (
                    AstNode::Predicate { key: k1, value: v1 },
                    AstNode::Predicate { key: k2, value: v2 },
                ) => k1 == k2 && v1 == v2,
                _ => false,
            }
        }
    }

    fn predicate(key: PredicateKey, value: &str) -> Box<AstNode> {
        Box::new(AstNode::Predicate {
            key,
            value: value.to_string(),
        })
    }

    #[test]
    fn test_parse_simple_predicate() {
        let ast = parse_query("ext:rs").unwrap();
        assert_eq!(ast, *predicate(PredicateKey::Ext, "rs"));
    }

    #[test]
    fn test_predicate_with_quoted_value() {
        let ast = parse_query("contains:'fn main'").unwrap();
        assert_eq!(ast, *predicate(PredicateKey::Contains, "fn main"));
    }

    #[test]
    fn test_predicate_alias() {
        let ast = parse_query("c:\"some value\"").unwrap();
        assert_eq!(ast, *predicate(PredicateKey::Contains, "some value"));
    }

    #[test]
    fn test_unknown_predicate_key() {
        let ast = parse_query("extension:rs").unwrap();
        assert_eq!(
            ast,
            *predicate(PredicateKey::Other("extension".to_string()), "rs")
        );
    }

    #[test]
    fn test_parse_and_operator() {
        let ast = parse_query("ext:rs & contains:'fn'").unwrap();
        let expected = AstNode::And(
            predicate(PredicateKey::Ext, "rs"),
            predicate(PredicateKey::Contains, "fn"),
        );
        assert_eq!(ast, expected);
    }

    #[test]
    fn test_parse_or_operator() {
        let ast = parse_query("ext:rs | ext:toml").unwrap();
        let expected = AstNode::Or(
            predicate(PredicateKey::Ext, "rs"),
            predicate(PredicateKey::Ext, "toml"),
        );
        assert_eq!(ast, expected);
    }

    #[test]
    fn test_parse_not_operator() {
        let ast = parse_query("!ext:md").unwrap();
        let expected = AstNode::Not(predicate(PredicateKey::Ext, "md"));
        assert_eq!(ast, expected);
    }

    #[test]
    fn test_parse_precedence() {
        let ast = parse_query("ext:rs & name:main | ext:toml").unwrap();
        let expected = AstNode::Or(
            Box::new(AstNode::And(
                predicate(PredicateKey::Ext, "rs"),
                predicate(PredicateKey::Name, "main"),
            )),
            predicate(PredicateKey::Ext, "toml"),
        );
        assert_eq!(ast, expected);
    }

    #[test]
    fn test_parse_parentheses() {
        let ast = parse_query("ext:rs & (name:main | ext:toml)").unwrap();
        let expected = AstNode::And(
            predicate(PredicateKey::Ext, "rs"),
            Box::new(AstNode::Or(
                predicate(PredicateKey::Name, "main"),
                predicate(PredicateKey::Ext, "toml"),
            )),
        );
        assert_eq!(ast, expected);
    }

    #[test]
    fn test_parse_complex_nested_query() {
        let ast = parse_query("!(ext:rs | path:tests) & (contains:'foo' | c:'bar')").unwrap();
        let expected = AstNode::And(
            Box::new(AstNode::Not(Box::new(AstNode::Or(
                predicate(PredicateKey::Ext, "rs"),
                predicate(PredicateKey::Path, "tests"),
            )))),
            Box::new(AstNode::Or(
                predicate(PredicateKey::Contains, "foo"),
                predicate(PredicateKey::Contains, "bar"),
            )),
        );
        assert_eq!(ast, expected);
    }

    #[test]
    fn test_whitespace_insensitivity() {
        let ast = parse_query("  ext:rs   &   (  path:src   )  ").unwrap();
        let expected = AstNode::And(
            predicate(PredicateKey::Ext, "rs"),
            predicate(PredicateKey::Path, "src"),
        );
        assert_eq!(ast, expected);
    }

    #[test]
    fn test_no_whitespace() {
        let ast = parse_query("ext:rs&path:src").unwrap();
        let expected = AstNode::And(
            predicate(PredicateKey::Ext, "rs"),
            predicate(PredicateKey::Path, "src"),
        );
        assert_eq!(ast, expected);
    }

    #[test]
    fn test_deeply_nested_precedence() {
        let ast = parse_query("a:1 | b:2 & c:3 | d:4 & e:5").unwrap();
        let expected = AstNode::Or(
            Box::new(AstNode::Or(
                predicate(PredicateKey::Other("a".to_string()), "1"),
                Box::new(AstNode::And(
                    predicate(PredicateKey::Other("b".to_string()), "2"),
                    // THIS IS THE CORRECTED LINE:
                    predicate(PredicateKey::Contains, "3"),
                )),
            )),
            Box::new(AstNode::And(
                predicate(PredicateKey::Other("d".to_string()), "4"),
                predicate(PredicateKey::Other("e".to_string()), "5"),
            )),
        );
        assert_eq!(ast, expected);
    }

    // --- SYNTAX ERROR TESTS ---

    #[test]
    fn test_error_on_trailing_operator() {
        let result = parse_query("ext:rs &");
        assert!(result.is_err());
    }

    #[test]
    fn test_error_on_missing_value() {
        let result = parse_query("ext:");
        assert!(result.is_err());
    }

    #[test]
    fn test_error_on_unclosed_parenthesis() {
        let result = parse_query("(ext:rs | path:src");
        assert!(result.is_err());
    }

    #[test]
    fn test_error_on_empty_query() {
        let result = parse_query("");
        assert!(result.is_err());
        assert_eq!(result.unwrap_err().to_string(), "Empty query");
    }

    #[test]
    fn test_error_on_whitespace_query() {
        let result = parse_query("   ");
        assert!(result.is_err());
        assert_eq!(result.unwrap_err().to_string(), "Empty query");
    }

    #[test]
    fn test_not_precedence_with_and() {
        // `!` should have higher precedence than `&`.
        // Should parse as: (!ext:rs) & path:src
        let ast = parse_query("!ext:rs & path:src").unwrap();
        let expected = AstNode::And(
            Box::new(AstNode::Not(predicate(PredicateKey::Ext, "rs"))),
            predicate(PredicateKey::Path, "src"),
        );
        assert_eq!(ast, expected);
    }

    #[test]
    fn test_not_with_parentheses() {
        // `!` should apply to the entire parenthesized group.
        let ast = parse_query("!(ext:rs | path:src)").unwrap();
        let expected = AstNode::Not(Box::new(AstNode::Or(
            predicate(PredicateKey::Ext, "rs"),
            predicate(PredicateKey::Path, "src"),
        )));
        assert_eq!(ast, expected);
    }

    #[test]
    fn test_long_or_chain_is_left_associative() {
        // Should parse as: ((a | b) | c) | d
        let ast = parse_query("ext:a | ext:b | ext:c | ext:d").unwrap();
        let expected = AstNode::Or(
            Box::new(AstNode::Or(
                Box::new(AstNode::Or(
                    predicate(PredicateKey::Ext, "a"),
                    predicate(PredicateKey::Ext, "b"),
                )),
                predicate(PredicateKey::Ext, "c"),
            )),
            predicate(PredicateKey::Ext, "d"),
        );
        assert_eq!(ast, expected);
    }

    #[test]
    fn test_long_and_chain_is_left_associative() {
        // Should parse as: ((a & b) & c) & d
        let ast = parse_query("ext:a & ext:b & ext:c & ext:d").unwrap();
        let expected = AstNode::And(
            Box::new(AstNode::And(
                Box::new(AstNode::And(
                    predicate(PredicateKey::Ext, "a"),
                    predicate(PredicateKey::Ext, "b"),
                )),
                predicate(PredicateKey::Ext, "c"),
            )),
            predicate(PredicateKey::Ext, "d"),
        );
        assert_eq!(ast, expected);
    }

    #[test]
    fn test_redundant_parentheses() {
        let ast = parse_query("((ext:rs))").unwrap();
        assert_eq!(ast, *predicate(PredicateKey::Ext, "rs"));
    }

    #[test]
    fn test_value_containing_special_char_must_be_quoted() {
        // An unquoted value cannot contain '&'
        let result = parse_query("name:foo&bar");
        assert!(result.is_err());

        // But a quoted one can
        let ast = parse_query("name:'foo&bar'").unwrap();
        assert_eq!(ast, *predicate(PredicateKey::Name, "foo&bar"));
    }
}


// END rdump/src/parser.rs

